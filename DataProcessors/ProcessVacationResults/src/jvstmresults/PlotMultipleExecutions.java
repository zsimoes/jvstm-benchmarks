package jvstmresults;

import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.Writer;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import jvstm.tuning.TuningPoint;

public class PlotMultipleExecutions
{

	protected static String nl = System.getProperty("line.separator");
	protected static String executionExtension = ".executiondata";

	/* @formatter:off */
	protected static final String gnuplotCode = 
			"# This file was generated by PlotMultipleExecutions.java." + nl +
			"reset" + nl +
			"set terminal pdfcairo" + nl +
			"set output \"execution.pdf\"" + nl +

			"unset for [i=1:8] label i" + nl +
			"set title \"jvstm execution time comparison\"" + nl +
			"set xlabel \"configuration\"" + nl +
			"set key outside center bottom vertical Left" + nl +
			"set yrange [0:]" + nl +
			"set bmargin 6" + nl +
			"set offset 0.3,0.3" + nl +

			"set style line 1 lt -1 lc rgb \"#00000000\" pt 4 ps 0.6 lw 1" + nl +
			"set style line 2 lt -1 lc rgb \"#00000000\" pt 5 ps 0.6 lw 1" + nl +
			"set style line 3 lt -1 lc rgb \"#00000000\" pt 6 ps 0.6 lw 1" + nl +
			"set style line 4 lt -1 lc rgb \"#00000000\" pt 7 ps 0.6 lw 1" + nl +
			"set style line 5 lt -1 lc rgb \"#00000000\" pt 8 ps 0.6 lw 1" + nl +
			"set style line 6 lt -1 lc rgb \"#00000000\" pt 9 ps 0.6 lw 1" + nl +
			"set style line 7 lt -1 lc rgb \"#00000000\" pt 10 ps 0.6 lw 1" + nl +
			"set style line 8 lt -1 lc rgb \"#00000000\" pt 11 ps 0.6 lw 1" + nl +
			"set style line 9 lt -1 lc rgb \"#00000000\" pt 12 ps 0.6 lw 1" + nl +
			"set style line 10 lt -1 lc rgb \"#00000000\" pt 13 ps 0.6 lw 1" + nl +
			"set style line 11 lt -1 lc rgb \"#00000000\" pt 14 ps 0.6 lw 1" + nl +
			"set style line 12 lt -1 lc rgb \"#00000000\" pt 15 ps 0.6 lw 1" + nl +
			"# The following sections generate plots for the result file data:" + nl + nl;
	
	/* @formatter:on */

	protected static final String startPlot = "plot ";

	/* @formatter:off */
	protected String getPlotLine(String dataFile, String title, int linestyle, boolean endPlot)
	{
		String result = 
				" '" + dataFile + "' " + 
				"using 2:xticlabels(1) with linespoints ls " + linestyle
				+ " title '" + title + "' " + (endPlot ? "" : ", \\") + nl;
		return result;
	}
	/* @formatter:on */

	protected String getOutputString(String targetFile)
	{
		return "set output \"" + targetFile + "\"" + nl;
	}

	protected String parentPath;

	/* @formatter:off */
	String example = 
			"plot 'Default-high-contention.surfacedata' using 2:xticlabels(1) with linespoints ls 1 title 'Default-high-contention',  \"" + nl +
			"     'LinearGD-high-contention.surfacedata' using 2:xticlabels(1) with linespoints ls 2 title 'LinearGD-high-contention', \"" + nl +
			"     'FullGD-high-contention.surfacedata' using 2:xticlabels(1) with linespoints ls 3 title 'FullGD-high-contention', \"" + nl +
			"	 'HierarchicalGD-high-contention.surfacedata' using 2:xticlabels(1) with linespoints ls 4 title 'HierarchicalGD-high-contention'" + nl +
			"	 " + nl +
			"plot 'Default-low-contention.surfacedata' using 2:xticlabels(1) with linespoints ls 1 title 'Default-low-contention',  \"" + nl +
			"     'LinearGD-low-contention.surfacedata' using 2:xticlabels(1) with linespoints ls 2 title 'LinearGD-low-contention', \"" + nl +
			"     'FullGD-low-contention.surfacedata' using 2:xticlabels(1) with linespoints ls 3 title 'FullGD-low-contention', \"" + nl +
			"	 'HierarchicalGD-low-contention.surfacedata' using 2:xticlabels(1) with linespoints ls 4 title 'HierarchicalGD-low-contention'" + nl;
	/* @formatter:on */

	public void process(File target)
	{

		ProcessFolders pFolders = new ProcessFolders();
		if (!target.isDirectory())
		{
			System.out.println("(Process Execution) Invalid JVSTM folder: " + target);
			System.exit(1);
		}
		parentPath = target.getAbsolutePath();

		/*
		 * NO DECENT PARSER MADE. quick and dirty hack based on filenames:
		 */
		File[] logFiles = target.listFiles(new FilenameFilter()
		{
			@Override
			public boolean accept(File dir, String name)
			{
				return name.endsWith(".log") || name.endsWith(".data");
			}
		});

		// example: execution-Default-Low.log
		Map<String, Map<String, File>> fileLookup = new HashMap<String, Map<String,File>>();
		
		for(File logFile : logFiles) {
			String[] splitz = logFile.getName().split("-.");
			assert(splitz[0].equals("execution"));
			String policy = splitz[1];
			String contention = splitz[2] + "Contention";
			if(!fileLookup.containsKey(contention)) {
				fileLookup.put(contention, new HashMap<String, File>());
			}
			fileLookup.get(contention).put(policy, logFile);
		}
		
		/*
		 * End Hack
		 */

		StringBuilder gnuplotBuilder = new StringBuilder();
		gnuplotBuilder.append(gnuplotCode);

		// For now only iterates contention and policy.
		StringBuilder intermediateFiles = new StringBuilder();
		int lineStyleCounter = 1;
		for (String contention : fileLookup.keySet())
		{
			int policyCounter = 0;
			gnuplotBuilder.append(startPlot);
			for (String policy : fileLookup.get(contention).keySet())
			{
				policyCounter++;
				File result = fileLookup.get(contention).get(policy);
								
				/* @formatter:off */
				
				/* Used for multiple configs
				 * Disabled for now!
				 
				StringBuilder intermediate = new StringBuilder();

				TreeMap<TuningPoint, JVSTMLog> sorted = new TreeMap<TuningPoint, JVSTMLog>(new Comparator<TuningPoint>()
				{

					@Override
					public int compare(TuningPoint o1, TuningPoint o2)
					{
						return Integer.compare((o1.first * o1.second), (o2.first * o2.second));
					}
				}); 
				for (JVSTMLog runLog : results)
				{
					sorted.put(runLog.initialConfig, runLog);
				}
				for (JVSTMLog l : sorted.values())
				{
					// System.out.println(l.policy + " " + l.contention + " " +
					// l.initialConfig.toString());
					String line = l.initialConfig.first + "x" + l.initialConfig.second + " " + l.executionTime + nl;
					intermediate.append(line);
				}

				String[] split = policy.split("\\.");
				String policyClass = split[split.length - 1];
				File intermediateFile = new File(target,
						policyClass + "-" + contention + "Contention" + executionExtension);
				try
				{
					Writer writer = new FileWriter(intermediateFile, false);
					writer.write(intermediate.toString());
					writer.close();
					intermediateFiles.append(
							"\t" + intermediateFile.getParentFile().getName() + "\\" + intermediateFile.getName() + nl);
				} catch (IOException e)
				{
					System.err.println("PlotExecution: could not write intermediate file " + intermediateFile.getName()
							+ ". Cause: " + e.getMessage());
					System.exit(1);
				}

				// save file name in gnuplot script:
				gnuplotBuilder.append(getPlotLine(intermediateFile.getName(),
						intermediateFile.getName().replace(executionExtension, ""), lineStyleCounter++,
						policyCounter == jvstmFolder.getJvstmPolicies().size()));
						
				*/
				/* @formatter:on */

				// save file name in gnuplot script:
				gnuplotBuilder.append(getPlotLine(result.getName(),
						result.getName().replace(".log", ""), lineStyleCounter++,
						policyCounter == fileLookup.get(contention).keySet().size()));
				
				
			} // ! for policy

			gnuplotBuilder.append(nl);
		} // ! for contention

		System.err.println("  (PlotMultipleExecutions - intermediate data) Wrote execution comparison data files: " + nl
				+ intermediateFiles.toString());

		String executionGPResult = "execution.gp";
		File gnuplot = new File(parentPath, executionGPResult);
		try
		{
			Writer w = new FileWriter(gnuplot, false);
			w.write(gnuplotBuilder.toString());
			w.close();
		} catch (IOException e)
		{
			throw new RuntimeException(
					"Could not write gnuplot file: " + gnuplot.getAbsolutePath() + ". Cause: " + e.getMessage());
		}

		System.err.println("PlotMultipleExecutions - generated file " + gnuplot.getParentFile().getName() + "\\"
				+ gnuplot.getName());
	}

}
